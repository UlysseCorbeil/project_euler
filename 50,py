import math

def gen_primes(n):
    sieve = [True] * n
    for i in range(3, int( n ** 0.5 ) + 1, 2):
        if sieve[i]:
            sieve[i * i::2 * i] = [False] * ((n - i * i - 1) // (2 * i) + 1)
    return [2] + [i for i in range(3, n, 2) if sieve[i]]

def is_prime(n):
    for k in range(2, int(math.sqrt(n)) + 1):
        if n % k == 0:
            return False
    return True

def c_cons_primes (n):
    p = gen_primes(n)
    sum = 0
    for k in p:
        sum += k

    b_l = []
    if is_prime(sum):
        b_l.append(len(p))
        return sum

def find_l_cons_p (n):
    for k in range(1, n + 1):
        return c_cons_primes(k)
print(find_l_cons_p(14))
